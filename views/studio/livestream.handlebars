{{> nav_studio}}


<div class="d-flex align-items-stretch justify-content-center livestream-div">
  
  <section id="super-admin-title-left">
    <span>
      {{#if courseName}}
        {{courseName}}
      {{else}}
        課程資訊
      {{/if}}
      </span>
    <hr id="hr">
  </section>


  <section>
    <button id="connLivestream">加入課程</button>
    <br>
    <br>
    <p id="after-conn"></p>
    <video autoplay id="remoteVideo" playsinline></video>
  </section>
</div>


<!-- socket io 套件 -->
<script src="https://cdn.socket.io/4.5.0/socket.io.min.js"
  integrity="sha384-7EyYLQZgWBi67fBtVxw60/OWl1kjsfrPFcaU0pp0nAh+i8FD068QogUvg85Ewy1k" crossorigin="anonymous"></script>

<!-- 自己寫的腳本 -->
<script>
  const socket = io()

  const courseDetailId = Number("{{courseDetailId}}")
  const studentId = Number("{{userId}}")


  const studentNumber = document.querySelector('#student-number')
  const connBtn = document.querySelector('#connLivestream')
  const remoteVideo = document.querySelector('#remoteVideo')
  const afterConn = document.querySelector('#after-conn')

  let pc
  let sdp

  connBtn.addEventListener('click', () => {
    afterConn.innerText = `已加入 ${courseDetailId} 課程的直播`
    initPeer()
    joinRoom()

    // 監聽 peerConnectSignaling ，再判斷收到結果是 SDP 還是 ICE 候選位置
    socket.on(courseDetailId, async (message) => {
      // desc 指的是 SDP 的 Offer 與 Answer。currentRemoteDescription 代表的是最近一次連線成功的相關訊息
      if (message.desc && message.studentId === studentId) { // 如果是 SDP
        // console.log('desc => ', message.desc)

        await pc.setRemoteDescription(new RTCSessionDescription(message.desc)) // 呼叫 setRemoteDescription 儲存收到的 SDP
        createSDP('Answer')
      } else if (message.candidate && +message.studentId === studentId) { // 如果收到的是 ICE 候選位置
        // console.log('candidate =>', message.candidate)
        pc.addIceCandidate(new RTCIceCandidate(message.candidate)) // 儲存收到的 ice candidate
      }
    })

    onIceCandidates()
    // onIceconnectionStateChange()
    onAddStream()
  })


  // 建立 P2P 連接（電腦大多位於 NAT 之後，因此使用 STUN 技術，向 STUN server 取得候選 ip）
  function initPeer() {
    const configuration = {
      iceServers: [{
        urls: 'stun:stun.l.google.com:19302' // Google's public STUN server
      }]
    }
    pc = new RTCPeerConnection(configuration) // 建立一個 peer connection instance
  }

  // 加入房間
  function joinRoom() {
    // 使用 socket io 向 server 發送訊號
    socket.emit('joinRoom', {
      courseDetailId,
      studentId,
      joinRoom: 'new member join'
    });
  }


  async function createSDP(type) {
    // pc.createOffer 或 pc.createAnswer 需要的基本參數
    const signalOption = {
      offerToReceiveAudio: 1, // 是否傳送聲音流給對方
      offerToReceiveVideo: 1, // 是否傳送影像流給對方
    }

    try {
      if (!pc) {
        return alert('尚未開啟視訊')
      }

      const createType = type === 'Offer' ? 'createOffer' : 'createAnswer' // 決定要建立 Offer 還是 Answer
      const sdp = await pc[createType](signalOption) // 建立 SDP
      await pc.setLocalDescription(sdp) // 建立好的 SDP 交給 pc instance 存在 local description。同時，pc 開始去 get candidates（接著將觸發 onIceCandidates
      // 把 sdp 傳給 Signaling Sever
      socket.emit("peerConnectSignaling", {
        courseDetailId,
        studentId,
        desc: pc.localDescription
      })
    } catch (err) {
      console.log(err)
    }
  }


  // 監聽 onicecandidate 狀態
  function onIceCandidates() {
    // 如果建立了 ICE candidate，就用 socket.io 送去給 Server
    pc.onicecandidate = ({ candidate }) => {
      if (!candidate) { return }

      // console.log('onIceCandidate => ', candidate)
      socket.emit('peerConnectSignaling', {
        courseDetailId,
        studentId,
        candidate
      })
      // console.log('送出 ice candidate!');
    }
  }

  // 監聽是否有流傳入，如果有的話就顯示影像
  function onAddStream() {
    pc.onaddstream = (event) => {
      if (!remoteVideo.srcObject && event.stream) {
        remoteVideo.srcObject = event.stream
      }
    }
  }

</script>